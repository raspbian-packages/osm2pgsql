language: generic
sudo: required

git:
  depth: 1

addons:
  # Here we install only packages that are the same for all builds on ubuntu.
  apt:
    packages: ['python3-psycopg2', 'libexpat1-dev', 'libpq-dev', 'libbz2-dev',
               'libproj-dev', 'libluajit-5.1-dev',
               'libboost-dev', 'libboost-system-dev', 'libboost-filesystem-dev']

# env: T="...."     //  please set an unique test id (T="..")
matrix:
  include:
  # ---- Release build against all postgresql versions
    - os: linux
      dist: bionic
      compiler: gcc-8
      env: T="bionic_gcc8_all_9_luajit_release"
           PG_VERSIONS="9.3 9.4 9.5 9.6"
           LUA_VERSION=5.3
           BUILD_TYPE="Release" LUAJIT_OPTION="ON"
           CXXFLAGS="-pedantic -Wextra -Werror"
           CC=gcc-8 CXX=g++-8 CPPVERSION=14

    - os: linux
      dist: bionic
      compiler: gcc-8
      env: T="bionic_gcc8_all_10+_luajit_release"
           PG_VERSIONS="10 11 12"
           LUA_VERSION=5.3
           BUILD_TYPE="Release" LUAJIT_OPTION="ON"
           CXXFLAGS="-pedantic -Wextra -Werror"
           CC=gcc-8 CXX=g++-8 CPPVERSION=14

  # ---- Linux + CLANG ---------------------------
    - os: linux
      dist: xenial
      compiler: "clang-3.5"
      env: T="xenial_clang35_pg95_luajit"
           PG_VERSIONS=9.5
           POSTGIS_VERSION=2.3
           LUA_VERSION=5.1
           BUILD_TYPE="Debug" LUAJIT_OPTION="ON"
           CXXFLAGS="-pedantic -Wextra -Werror"
           CC=clang-3.5 CXX=clang++-3.5 CPPVERSION=11

    - os: linux
      dist: bionic
      compiler: "clang-7"
      env: T="bionic_clang7_pg10"
           PG_VERSIONS=10
           POSTGIS_VERSION=2.5
           LUA_VERSION=5.3
           BUILD_TYPE="Debug" LUAJIT_OPTION="OFF"
           CXXFLAGS="-pedantic -Wextra -Werror"
           CC=clang-7 CXX=clang++-7 CPPVERSION=14

  # ---- OSX + CLANG ---------------------------
  #  - os: osx
  #    compiler: clang
  #    env: T="osx_clang_NoDB"
  #         BUILD_TYPE="Debug" LUAJIT_OPTION="OFF" TEST_NODB=1
  #         CXXFLAGS="-pedantic -Wextra -Werror" CPPVERSION=11
  #    before_install:
  #      - brew install lua; brew install lua
  #    before_script:
  #      - proj | head -n1
  #      - lua -v

  # ---- Linux + GCC ---------------------------
    - os: linux
      dist: xenial
      compiler: "gcc-5"
      env: T="xenial_gcc5_pg94"
           PG_VERSIONS=9.4
           POSTGIS_VERSION=2.2
           LUA_VERSION=5.3
           BUILD_TYPE="Debug" LUAJIT_OPTION="OFF"
           CXXFLAGS="-pedantic -Wextra -Werror"
           CC=gcc-5 CXX=g++-5 CPPVERSION=11

    - os: linux
      dist: bionic
      compiler: gcc-7
      env: T="bionic_gcc7_pg12"
           PG_VERSIONS=12
           POSTGIS_VERSION=3
           LUA_VERSION=5.1
           BUILD_TYPE="Debug" LUAJIT_OPTION="OFF"
           CXXFLAGS="-pedantic -Wextra -Werror"
           CC=gcc-7 CXX=g++-7 CPPVERSION=11


    - os: linux
      dist: bionic
      compiler: gcc-8
      env: T="bionic_gcc8_pg10_luajit"
           PG_VERSIONS=10
           POSTGIS_VERSION=2.4
           LUA_VERSION=5.2
           BUILD_TYPE="Debug" LUAJIT_OPTION="ON"
           CXXFLAGS="-pedantic -Wextra -Werror"
           CC=gcc-8 CXX=g++-8 CPPVERSION=11


    - os: linux
      dist: bionic
      compiler: gcc-8
      env: T="bionic_gcc8_pg10_no_lua"
           PG_VERSIONS=10
           POSTGIS_VERSION=2.4
           BUILD_TYPE="Debug"
           CXXFLAGS="-pedantic -Wextra -Werror"
           CC=gcc-8 CXX=g++-8 CPPVERSION=11


    - os: linux
      dist: focal
      compiler: gcc-9
      env: T="focal_gcc9_pg12_luajit"
           PG_VERSIONS=12
           POSTGIS_VERSION=3
           LUA_VERSION=5.2
           BUILD_TYPE="Debug" LUAJIT_OPTION="ON"
           CXXFLAGS="-pedantic -Wextra -Werror"
           CC=gcc-9 CXX=g++-9 CPPVERSION=11

before_install:
  - dpkg -l | grep -E 'lua|proj|bz2|postgresql|postgis|zlib|boost|expat'  # checking available versions
  - sudo apt-get remove -yq postgresql-.*-postgis-.*
  - apt-cache search --names-only postgresql-.*-postgis
  - apt-cache search --names-only postgresql-.*
  - for PG_VERSION in $PG_VERSIONS; do
      if [[ "a$POSTGIS_VERSION" = "a" ]]; then
        PPG=`apt-cache search --names-only postgresql-$PG_VERSION-postgis-[0-9.]*$ | tail -n1 | cut -d ' ' -f 1`;
      else
        PPG=postgresql-$PG_VERSION-postgis-$POSTGIS_VERSION;
      fi;
      export POSTGIS_PKG="$POSTGIS_PKG $PPG $PPG-scripts";
    done
  - echo $POSTGIS_PKG
  - sudo -E apt-get install -yq --no-install-suggests --no-install-recommends $CC $POSTGIS_PKG
  - if [ -n "${LUA_VERSION}" ]; then sudo -E apt-get install -yq --no-install-suggests --no-install-recommends liblua$LUA_VERSION-dev lua$LUA_VERSION; fi
  # g++ needs extra install, clang doesn't, so ignore errors here
  - sudo -E apt-get install -yq --no-install-suggests --no-install-recommends $CXX || true

before_script:
  - for PG_VERSION in $PG_VERSIONS; do PAGER= pg_virtualenv -v $PG_VERSION psql -ena -c "select * from pg_available_extensions where name = 'postgis'" -c "SELECT version()" -c "CREATE EXTENSION postgis" -c "CREATE EXTENSION hstore" -c "SELECT PostGIS_Full_Version()"; done
  - $CXX --version
  - proj | head -n1

script:
  - mkdir build && cd build
  - if [ -z "${LUA_VERSION}" ]; then LUA_OPTIONS="-DWITH_LUA=OFF"; else LUA_OPTIONS="-DWITH_LUA=ON -DWITH_LUAJIT=${LUAJIT_OPTION}"; fi
  - cmake .. -LA -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_STANDARD=${CPPVERSION} ${LUA_OPTIONS}
  - make -j2
  - echo "Running tests ... "
  - if [[ $TEST_NODB ]]; then
      ctest --output-on-failure -L NoDB;
    else
      for PG_VERSION in $PG_VERSIONS; do
        pg_virtualenv -v $PG_VERSION ctest --output-on-failure;
        if [[ $? -ne "0" ]]; then exit 2; fi
      done
    fi

after_failure:
  - # rerun make, but verbosely
    make VERBOSE=1

